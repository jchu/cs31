# Sample Programs

[[TOC]]

## Array Sorting

### #insertsort Insertion Sort

Showcases array manipulation

    /************************************************
     *
     * Insertion Sort Example
     *
     * Sort a user defined array of size ARRAY_SIZE
     * using insertion sort algorithm
     *
     ************************************************/
    #include <iostream>
    using namespace std;
    
    const int ARRAY_SIZE = 10;

    void sort(int[], int);
    void move_over(int[], int, int);
    void display(int[], int);
    
    int main() {
        cout << "Enter " << ARRAY_SIZE << " unsorted numbers "
             << "(each followed by newline):" << endl;
    
        int numbers[ARRAY_SIZE];
        for(int i = 0; i < ARRAY_SIZE; i++ ) {
            cout << "> ";
            cin >> numbers[i];
        }
    
        // reprint array for user
        display(numbers, ARRAY_SIZE)
    
        sort(numbers, ARRAY_SIZE);

        // display results
        display(numbers, ARRAY_SIZE)
    }

    /**
     * Print out array
     *
     * \param array Array to print
     */
    void display(int array[], int size) {
        for(int i = 0; i < size; i++ ) {
            cout << display[i] << " ";
        }
        cout << endl;
    }
    
    /**
     * Sort array using insertion sort algorithm
     *
     * \param array Array to sort
     * \param size  Size of array
     */
    void sort(int array[], int size) {
        for(int i = 1; i < size; i++) {
            // invariant: everything to the left of i is sorted
            for(int j = 0; j < i; j++ ) {
                if( array[i] < array[j] ) {
                    int temp = array[i];
                    move_over(array, j, i);
                    array[j] = temp;
                }
            }
        }
    }
    
    /**
     * Moves all elements to the right once
     *
     * \param array Array to modify
     * \param start Leftmost index to move
     * \param last  Rightmost index to move
     *              Must be < size - 1 of array
     */
    void move_over(int array[], int start, int last) {
        for(int i = last; i >= start; i--) {
            array[i] = array[i-1];
        }
    }

## #21 Black Jack

The game of Black Jack involves:

1. Making a random deck of cards
2. Organizing players
3. User decision or AI
4. Implementing game actions

The first subsection shows an alternative represention of a deck of cards using a single number of represent both the rank and suit of a card and an array to hold cards. Showcases functions, array manipulation, number representation.

The rest of the subsections are a complete game example using classes, vectors, and pointers. There are 4 objects - a card, a deck, a player, and the game itself.

Showcases classes and objects, multiple compilation, pointers, Makefile.

[blackjack source tarball](blackjack.tar)

### Creating the deck using arrays

Showcases functions, array manipulation, number representation.

    /************************************************
     *
     * Shuffle Decks
     *
     * Sample program that creates and shuffles decks
     *
     * Cards are representd by a single integer. The
     * last digit represents the suit, while the
     * preceding digits represent the rank.
     *
     * The deck is shuffled with a simpel random swap.
     *
     ***********************************************/
    
    #include <iostream>
    #include <cstdlib>
    #include <ctime>
    using namespace std;
    
    
    void shuffle_deck(int deck[], int size);
    void swap_cards(int deck[], int a, int b);
    void make_ordered_deck(int deck[]);
    void print_deck(int deck[]);
    void print_card(int card);
    
    const int DECK_SIZE = 52;
    int deck[DECK_SIZE];
    
    int main() {
        srand(time(0));
    

        // For demo purposes, create and shuffle 5 decks
        for(int i = 0; i < 5; i++) {
            cout << "Round " << i << endl;
            make_ordered_deck(deck);
    
            cout << endl << "Before: ";
            print_deck(deck);
            shuffle_deck(deck, DECK_SIZE);
            cout << endl  << "After: ";
            print_deck(deck);
            cout << endl << endl;
        }
    }
    
    
    
    /** 
     * Shuffle deck
     *
     * \param deck  Deck to shuffle
     * \param size  size of deck left to shuffle
     */
    void shuffle_deck(int deck[], int size) {
        if( size == 0 )
            return;
        int i = rand() % size;
        swap_cards(deck, i, size-1);
        shuffle_deck(deck, size-1);
    }
    
    /**
     * Swap any pair of cards in the deck
     *
     * \param deck  Deck of cards
     * \param a     A card
     * \param b     Another card
     */
    void swap_cards(int deck[], int a, int b) {
        if( a != b ) {
            deck[a] ^= deck[b];
            deck[b] ^= deck[a];
            deck[a] ^= deck[b];
        }
    }
    
    /**
     * Initialize a completely ordered deck
     *
     * \param deck  Deck to initalize
     */
    void make_ordered_deck(int deck[]) {
        for(int i = 0; i < DECK_SIZE; i++) {
            // last digit represents suit
            // other digits represent rank
            deck[i] = (((i % 13)+1) * 10) + i / 13;
        }
    }
    
    /**
     * Print out cards in the deck
     *
     * \param deck  Deck to print
     */
    void print_deck(int deck[]) {
        for(int i = 0; i < DECK_SIZE; i++ ) {
            if(i % 13 == 0)
                cout << endl;
            print_card(deck[i]);
            cout << "\t";
        }
    }
    
    /**
     * Print out a card
     *
     * \param card  Card
     */
    void print_card(int card) {
        int rank = card / 10;
        int suit = card % 10;
    
        switch(rank) {
            case 1:
                cout << "A";
                break;
            case 11:
                cout << "J";
                break;
            case 12:
                cout << "Q";
                break;
            case 13:
                cout << "K";
                break;
            default:
                cout << rank;
                break;
        };
    
        switch(suit) {
            case 0:
                cout << "H";
                break;
            case 1:
                cout << "S";
                break;
            case 2:
                cout << "D";
                break;
            case 3:
                cout << "C";
                break;
        };
    
    }

### game.cpp

An example game of BlackJack. There are two players: the user and the dealer. One round of BlackJack is played.

    #include <iostream>
    
    #include "player.h"
    #include "blackjack.h"
    
    using namespace std;
    
    
    int main() {
        Player* p0 = new Player("p0");
        Player* dealer = new Player("Dealer");
    
        BlackJack game = BlackJack();
        game.addPlayer(p0);
        game.addPlayer(dealer);
    
        Player* winner;
        
        winner = game.playRound();
    
        if( winner == NULL )
            cout << "No winner this round." << endl;
        else {
            cout << winner->name() << " won with hand: ";
            winner->printPrivateHand();
        }
    }

### blackjack.h

The `BlackJack` class contains a list of the players and the deck. It also contains the AI strategy for non-user players.

    #ifndef GAME_H
    #define GAME_H
    
    #include <vector>
    
    #include "deck.h"
    #include "player.h"
    
    const int HIT = 0;
    const int FOLD = 1;
    const int STAY = 2;
    
    const int TARGET = 21;
    
    class BlackJack {
    
    public:
        BlackJack();
    
        /**
         * Add a new player to the game
         *
         * \param Player* Player to add
         */
        void addPlayer(Player *p) { players.push_back(p); }
    
        /**
         * Play a single round of BlackJack
         *
         * \return Player* Winning player. Can be NULL
         */
        Player* playRound();
    
        /**
         * Play a single turn for all players
         */
        void playTurn();
    
    private:
    
        /**
         * Deal the initial cards to all players
         */
        void dealInitial();
    
        /**
         * Prompt player for actions
         *
         * \return char Action chosen
         */
        char promptChoice(Player *player);
    
        /**
         * Determine if the round is over
         *
         * Round ends when there is a winner or everyone
         * loses.
         *
         * \return bool True when round is over
         */
        bool roundOver();
    
        /**
         * Find the winner
         *
         * \return Player* Winning Player. Can be NULL
         */
        Player* winner();
    
        /**
         * Naive strategy
         *
         * Hit when value is lower than 13. Stay otherwise.
         *
         * Used for non-user players.
         */
        char naiveAIStrategy(Player *player);
    
        std::vector<Player *> players; // List of players
        Deck deck; 
    };
    
    #endif

### blackjack.cpp

A single round of BlackJack involves:

1. Dealing the inital 2 cards to each player
2. For each player, decide on an action (hit or stay)
3. Act on that action
4. After each player has made an action, check to see if the game is over
5. If not, repeat until game over

The `BlackJack` class contains the players and the deck of cards.


    /**********************************************************\
     *
     * BlackJack
     *
     * A single game of BlackJack
     *
     * Game Description:
     *
     * Players are initially dealt 2 cards. Each turn, a player
     * can choose to 'hit' to get another card or otherwise
     * 'stay'. A player's hand has a sum total of the rank of
     * cards except: All face cards have a value of 10 and the
     * Ace has either a value of 1 or 11.
     *
     * Players compete to get a higher value hand. However, the
     * maximum value is 21. A player goes 'bust' when their hand
     * is worth more than 21.
     *
     * Class Description:
     *
     * BlackJack can accept any number of players via addPlayer.
     * The first player added is assumed to be the User. All
     * other players are AI and follow the Naive AI Strategy
     * (hit when score is < 13, stay otherwise).
     *
     * playRound() plays a single round. When the deck is empty,
     * the game is over.
     *
    \**********************************************************/
    
    #include <vector>
    #include <string>
    #include <iostream>
    
    #include "deck.h"
    #include "player.h"
    #include "blackjack.h"
    
    using namespace std;
    
    BlackJack::BlackJack() {
        deck = Deck();
        deck.shuffle();
    }
    
    /**
     * Play a single round of BlackJack
     *
     * \return Player* Winning player. Can be NULL
     */
    Player* BlackJack::playRound() {
        dealInitial();
    
        if(deck.empty()) {
            cout << "Deck is empty. Game cannot be played. " << endl;
            return NULL;
        }
    
        // Overview of inital hands
    
        cout << "Your hand: ";
        players[0]->printPrivateHand();
        for(unsigned int i = 1; i < players.size(); i++) {
            cout << "Player " << i << "'s hand: ";
            players[i]->printPublicHand();
        }
    
        // Play turns
        while( !roundOver() )
            playTurn();
    
        cout << "Round over!" << endl << endl;
    
        return winner();
    }
    
    /**
     * Play a single turn for all players
     */
    void BlackJack::playTurn() {
        char choice;
        Card *draw;
    
        // Go through each player
        for(unsigned int i = 0; i < players.size(); i++) {
            // No more cards!
            if(deck.empty())
                return;
    
            cout << players[i]->name() << "'s hand: ";
    
    
            // Show hands
            if( i == 0 )
                players[i]->printPrivateHand();
            else
                players[i]->printPublicHand();
    
            // Skip if no actions can be taken
            if( players[i]->stayed() || players[i]->busted() )
                continue;
    
            // Prompt user for choice or use AI for non-users
            if( i == 0 )
                choice = promptChoice(players[i]);
            else
                choice = naiveAIStrategy(players[i]);
    
            switch(choice) {
                case 'h':
                    cout << "Hit me!" << endl;
                    draw = deck.deal();
                    cout << players[i]->name() << " drew a ";
                    draw->print();
                    cout << endl;
                    players[i]->addCard(draw);
                    break;
                case 's':
                    cout << "I stay!" << endl;
                    players[i]->stayHand();
                    break;
            };
    
            if( players[i]->busted() ) {
                cout << players[i]->name() << " busted!" << endl;
            }
        }
    }
    
    /**
     * Deal the initial cards to all players
     *
     * Each player gets 2 cards
     */
    void BlackJack::dealInitial() {
        for(unsigned int i = 0; i < players.size(); i++) {
            if(deck.empty())
                return;
    
            players[i]->addCard(deck.deal());
        }
        for(unsigned int i = 0; i < players.size(); i++) {
            if(deck.empty())
                return;
    
            players[i]->addCard(deck.deal());
        }
    }
    
    /**
     * Prompt player for actions
     *
     * \return char Action chosen
     */
    char BlackJack::promptChoice(Player* player) {
        char choice;
    
        do {
            cout << player->name() << " available actions: (h)it, (s)tay: ";
            cin >> choice;
            cout << endl;
    
            switch(choice) {
                case 'h':
                case 's':
                    return choice;
                default:
                    cout << "Invalid choice" << endl;
            };
        } while(true);
    }
    
    /**
     * Determine if the round is over
     *
     * Round ends when there is a winner or everyone
     * loses or when the deck is empty.
     *
     * \return bool True when round is over
     */
    bool BlackJack::roundOver() {
        int playing = players.size();
    
        // No more cards!
        if(deck.empty())
            return true;
    
        for(unsigned int i = 0; i < players.size(); i++) {
            if( players[i]->stayed() ) // stayed
                playing--;
            else if( players[i]->privateTotal() > 21 ) // busted
                playing--;
            else if( players[i]->privateTotal() == 21 ) // win
                return true;
        }
    
        // All payers either stayed or busted
        if( playing == 0 )
            return true;
    
        return false;
    }
    
    /**
     * Find the winner
     *
     * \return Player* Winning Player. Can be NULL
     */
    Player* BlackJack::winner() {
        Player* winner = NULL;
        int bestScore = 0;
        for(unsigned int i = 0; i < players.size(); i++) {
    
            // Show final hand
            cout << players[i]->name() << " (" << players[i]->privateTotal() << "): ";
            players[i]->printPrivateHand();
    
            // Find best score so far
            if( !players[i]->busted() ) {
                if( players[i]->privateTotal() > bestScore ) {
                    bestScore = players[i]->privateTotal();
                    winner = players[i];
                }
            }
        }
    
        return winner;
    }
    
    /**
     * Naive strategy
     *
     * Hit when value is lower than 13. Stay otherwise.
     *
     * Used for non-user players.
     */
    char BlackJack::naiveAIStrategy(Player *player) {
        if( player->privateTotal() < 13 )
            return 'h';
        return 's';
    }

### player.h

The `player` class contains a name, a hand of cards, and status variables.

    #ifndef PLAYER_H
    #define PLAYER_H
    
    #include <vector>
    #include <string>
    
    #include "card.h"
    
    class Player {
    public:
        Player(const char* name) : pname(name), stay(false) {}
    
        /**
         * Add a card to player's hand
         *
         * \param Card* Card to add
         */
        void addCard(Card *a) { hand.push_back(a); }
    
        /**
         * Reset player's hand and status
         */
        void reset() { hand.clear(); stay = false; }
    
        void stayHand() { stay = true; }
    
        /**
         * Print hand keeping first 2 cards hidden
         *
         * Used for displaying all hands on the table
         */
        void printPublicHand();
    
        /**
         * Print hand
         *
         * Used for displaying the player's hand
         */
        void printPrivateHand();
    
        bool stayed() { return stay; }
        bool busted() { return privateTotal() > 21; }
    
        std::string name() { return pname; }
    
        /**
         * Calculate value of hand including hidden cards
         */
        int privateTotal();
    
    private:
        std::string pname;
        std::vector<Card*> hand;
        bool stay;
    };
    
    #endif

### player.cpp

Implementation of the `player` class.

    #include <iostream>
    
    #include "card.h"
    #include "player.h"
    
    using namespace std;
    
    void Player::printPublicHand() {
        cout << "XX XX ";
        for(unsigned int i = 2; i < hand.size(); i++ ) {
            hand[i]->print();
            cout << " ";
        }
        cout << endl;
    }
    
    void Player::printPrivateHand() {
        for(unsigned int i = 0; i < hand.size(); i++ ) {
            hand[i]->print();
            cout << " ";
        }
        cout << endl;
    }
    
    /**
     * Calculate value of hand including hidden cards
     */
    int Player::privateTotal() {
        if( hand.size() < 2 )
            return -1;
    
        int sum = 0;
        int numAces = 0;
        for(unsigned int i = 0; i < hand.size(); i++ ) {
            if( *hand[i] == 1 )
                numAces++;
            else
                sum += *hand[i];
        }
        
        int tempSum;
        for(int j = numAces; j >= 0; j--) {
            tempSum = sum + (j * 11) + (numAces - j);
            if(tempSum <= 21)
                return tempSum;
        }
        return sum;
    }

### deck.h

The `deck` class contains the cards in the deck.

    #ifndef DECK_H
    #define DECK_H
    
    #include "card.h"
    
    const int DECK_SIZE = 52;
     
    class Deck {
    public:
        Deck();
    
        /** 
         * Shuffle deck
         *
         * Shuffle the entire deck
         */
        void shuffle();
        
        /**
         * Deal the topmost card
         *
         * Remove and return the topmost card
         *
         * \return Card* Card dealt. Can be NULl
         */
        Card *deal();
        bool empty() { return size == 0; }
    
        void print();
    
    private:
    
        /** 
         * Shuffle deck
         *
         * \param size  size of deck left to shuffle
         */
        void shuffle(int shufflesize);
    
        /**
         * Swap any pair of cards in the deck
         *
         * \param posA     A card position
         * \param posB     Another card position
         */
        void swap_cards(int posA, int posB);
    
        Card *deck[DECK_SIZE]; // deck of Card pointers
        int size; // number of cards in deck
    };

    #endif

### deck.cpp

Implementation fo the `deck` class.

    #include <iostream>
    #include <cstdlib>
    #include <ctime>
    
    #include "card.h"
    #include "deck.h"
    
    Using namespace std;
    
    /**
     * Initialize a completely ordered deck
     */
    Deck::Deck() : size(DECK_SIZE) {
        for(int i = 0; i < size; i++) {
            int rank = (i % 13) + 1;
            int suit = i / 13;
            deck[i] = new Card(rank, suit);
        }
        srand(time(0));
    }
    
    /** 
     * Shuffle deck
     *
     * Shuffle the entire deck
     */
    Void Deck::shuffle() {
        if( size == 0 )
            return;
        int i = rand() % size;
        swap_cards(i, size - 1);
        shuffle(size - 1);
    }
    
    /**
     * Deal the topmost card
     *
     * Remove and return the topmost card
     *
     * \return Card* Card dealt. Can be NULL.
     */
    Card* Deck::deal() {
        if( size - 1 < 0 )
            return NULL;
    
        Card* top = deck[size - 1];
        size--;
        return top;
    }
    
    /** 
     * Shuffle deck
     *
     * \param size  size of deck left to shuffle
     */
    Void Deck::shuffle(int shufflesize) {
        if( shufflesize != 0 ) {
            int i = rand() % shufflesize;
            swap_cards(i, shufflesize - 1);
            shuffle(shufflesize - 1);
        }
    }
     
     
    /**
     * Swap any pair of cards in the deck
     *
     * \param posA     A card position
     * \param posB     Another card position
     */
    Void Deck::swap_cards(int posA, int posB) {
        if( posA != posB ) {
            Card *temp = deck[posB];
            deck[posB] = deck[posA];
            deck[posA] = temp;
        }
    }
    
    /**
     * Print out cards in the deck
     */
    Void Deck::print() {
        for(int i = 0; i < size; i++ ) {
            if(i % 13 == 0)
                cout << endl;
            deck[i]->print();
            cout << "\t";
        }
        cout << endl;
    }

### card.h

A `card` is a suit and a rank. Face cards have value 10.

    #ifndef CARD_H
    #define CARD_H
    
    class Card {
    public:
        Card(int new_rank, int new_suit);
    
        void print();
    
        // Overload type cast to integer
        operator int() {
    
            // Face values have value 10
            if( rank > 10 )
                return 10;
    
            return rank;
        }
    
    private:
        int rank; // 1 - 13
        int suit; // H, S, D, C
    };

    #endif

### card.cpp

Implementation of the `card` class.

    #include <iostream>
    
    #include "card.h"
    
    using namespace std;
    
    /**
     * Constructor
     *
     * Initialize rank and suit
     */
    Card::Card(int new_rank, int new_suit)
        : rank(new_rank), suit(new_suit) {}
    
    /**
     * Print out a card
     */
    void Card::print() {
        switch(rank) {
            case 1:
                cout << "A";
                break;
            case 11:
                cout << "J";
                break;
            case 12:
                cout << "Q";
                break;
            case 13:
                cout << "K";
                break;
            default:
                cout << rank;
                break;
        };
     
        switch(suit) {
            case 0:
                cout << "H";
                break;
            case 1:
                cout << "S";
                break;
            case 2:
                cout << "D";
                break;
            case 3:
                cout << "C";
                break;
        };
    }

### Makefile

Makefile to compile the program using GNU Make.

    CC=g++
    CFLAGS=-g -Wall
    COMPILE=$(CC) $(CFLAGS)
    
    OBJECTS=card.o deck.o player.o blackjack.o
    
    all: game
    
    card.o: card.h card.cpp
    	$(COMPILE) -c card.cpp
    
    deck.o: deck.h deck.cpp
    	$(COMPILE) -c deck.cpp
    
    player.o: player.h player.cpp
    	$(COMPILE) -c player.cpp
    
    blackjack.o: blackjack.h blackjack.cpp
    	$(COMPILE) -c blackjack.cpp
    
    game: card.o deck.o player.o blackjack.o game.cpp
    	$(COMPILE) $(OBJECTS) -o game game.cpp
    
    clean:
    	rm -f $(OBJECTS) game

With this Makefile, just run `make && ./game`.

Explicit commands using `g++`:

    g++ -c card.cpp
    g++ -c deck.cpp
    g++ -c player.cpp
    g++ -c blackjack.cpp
    g++ card.o deck.o player.o blackjack.o -o game game.cpp
    ./game

## #pong Pong

Really simple game of pong.

Move the paddle left and right, making sure the ball never touched the ground.

There are 3 objects - the playing board, the ball, and the paddle.

Showcases classes and objects, multiple compilation, Makefile.

[pong source tarball](pong.tar)

### game.cpp

A game consists of the infinite game loop until the game is over.

    #include <iostream>
    
    #include "pong.h"
    
    using namespace std;
    
    int main() {
        cout << "Pong" << endl;
    
        Pong game = Pong();
    
        while(true) {
            // Run the game for one tick
            if( !game.tick() )
                break; // game is over when tick returns false
        }
    
        cout << "Game Over!" << endl;
    }

### pong.h

The `pong` class contains all the game elements - board, ball, and paddle. It also knows how to print the board and run one tick of the game.

    #ifndef PONG_H
    #define PONG_H
    
    #include "ball.h"
    #include "paddle.h"
    
    // Game constants
    const double GAME_WIDTH =       41;
    const double GAME_HEIGHT =      40;
    const double PADDLE_X =         6;
    const double PADDLE_Y =         5;
    const double PADDLE_WIDTH =     10;
    const double BALL_INITX =       21;
    const double BALL_INITY =       30;
    const double BALL_INITXVEL =    -2;
    const double BALL_INITYVEL =    -2;
    
    class Pong {
    
    public:
        Pong() : gwidth(GAME_WIDTH), gheight(GAME_HEIGHT),
            ball(BALL_INITX, BALL_INITY, BALL_INITXVEL, BALL_INITYVEL),
            paddle(PADDLE_X, PADDLE_Y, PADDLE_WIDTH) {};
    
        // Accessors
        double width() { return gwidth; }
        double height() { return gheight; }
    
        /**
         * Execute a single tick of the game
         *
         * Display board, ask for user input, and move paddle/board
         *
         * \return bool false on game over
         */
        bool tick();
    
        /**
         * Display the board, ball, paddle
         */
        void display();
    
    private:
        double gwidth, gheight;
        Ball ball;
        Paddle paddle;
    };
    
    #endif

### pong.cpp

Implementation of the `pong` class methods.

    #include <iostream>
    
    #include "ball.h"
    #include "paddle.h"
    #include "pong.h"
    
    using namespace std;
    
    /**
     * Execute a single tick of the game
     *
     * Display board, ask for user input, and move paddle/board
     *
     * \return bool false on game over
     */
    bool Pong::tick() {
        display();
    
        char dir;
        cout << "Move paddle (l, r, n): ";
        cin >> dir;
    
        paddle.move(dir, gwidth-1);
        ball.move(gwidth-1, gheight-1, paddle.left(), paddle.right(), paddle.y());
    
        if( ball.ypos() < 0 )
            return false;
        return true;
    }
    
    /**
     * Display the board, ball, paddle
     *
     * Board runs from 0 to gwidth and 0 to gheight.
     * (0,0) is bottem left corner
     * Board has a 1 character border on the edges
     */
    void Pong::display() {
        for( int y = gheight; y >= 0; y-- ) {
            for( int x = 0; x <= gwidth; x++ ) {
                if( y == gheight || y == 0 ) {
                    if( x == 0 || x == gwidth )
                        cout << '+'; // corners
                    else
                        cout << '-'; // top/bottom edges
                } else if(x == 0 || x == gwidth) {
                    cout << "|"; // side edges
                } else if( ball.xpos() == x && ball.ypos() == y ) {
                    cout << 'o'; // ball position
                } else if( paddle.y() == y
                        && (paddle.left() <= x && paddle.right() >= x)) {
                    cout << '_'; // paddle
                } else {
                    cout << ' '; // empty space
                }
    
                if( x == gwidth ) {
                    cout << endl; // newline for next row
                }
            }
        }
    }

### ball.h

A `ball` knows where it is, how fast its going, and how to move.

    #ifndef BALL_H
    #define BALL_H
    
    class Ball {
    
    public:
    
        Ball(double initx, double inity, double initxvel, double inityvel)
            : x(initx), y(inity), bxvel(initxvel), byvel(inityvel) {}
    
        // Accessors
        double xpos() const { return x; }
        double ypos() const { return y; }
        double xvel() const { return bxvel; }
        double yvel() const { return byvel; }
    
        /**
         * Move the ball and consider bounces and endgame
         *
         * \param xmax          max x position for ball
         * \param ymax          max y position for ball
         * \param paddleleft    left x position of paddle
         * \param paddleright   right x position of paddle
         * \param paddley       y position of paddle
         */
        void move(double xmax, double ymax, double paddleleft, double paddleright, double paddley);
    
    private:
        double x, y;
        double bxvel, byvel;
    };
    
    #endif

### ball.cpp

Implementation of the `ball` class methods.

    #include "ball.h"
    
    /**
     * Move the ball and consider bounces and endgame
     *
     * Ball normally moves bxvel, byvel in one tick.
     * May hit walls or paddle and reverse direction.
     * Stops moving once it hits the floor.
     *
     * \param xmax          max x position for ball
     * \param ymax          max y position for ball
     * \param paddleleft    left x position of paddle
     * \param paddleright   right x position of paddle
     * \param paddley       y position of paddle
     */
    void Ball::move(double xmax, double ymax, double paddleleft, double paddleright, double paddley) {
        if( x + bxvel < 0 ) {   // hit left wall
            x = -(x + bxvel);
            bxvel = -bxvel;
        } else if( x + bxvel >= xmax ) { // hit right wall
            x = (2 * xmax) - (x + bxvel);
            bxvel = -bxvel;
        } else { // normal
            x += bxvel;
        }
    
        if( y + byvel > ymax ) { // hit ceiling
            y = (2 * ymax) - (y + byvel);
            byvel = -byvel;
        } else if( y + byvel < paddley
            && (x > paddleleft && x < paddleright)) { // hit paddle
            y = (2 * paddley) - (y + byvel);
            byvel = -byvel;
        } else if( y + byvel < 0 ) { // hit floor, ENDGAME
            bxvel = 0;
            byvel = 0;
            x = -1;
            y = -1;
        } else { // normal
            y += byvel;
        }
    }

### paddle.h

A `paddle` knows where it is and how to move.

    #ifndef PADDLE_H
    #define PADDLE_H
    
    class Paddle {
    
    public:
        Paddle(double initx, double inity, double initwidth)
            : px(initx), py(inity), pwidth(initwidth) {}
    
        // Accessors
        double left() const { return px; }
        double right() const { return px+pwidth; }
        double width() const { return pwidth; }
        double y() const { return py; }
    
        /**
         * Move the paddle in a direction
         *
         * \param char dir      character representing direction
         * \param double xmax   max x position for paddle
         */
        void move(char dir, double xmax);
    
    private:
        double px, py;
        double pwidth;
    };
    
    #endif

### paddle.cpp

Implementation of the `paddle` class methods.

    #include "paddle.h"
    
    /**
     * Move the paddle in a direction
     *
     * \param char dir      character representing direction
     * \param double xmax   max x position for paddle
     */
    void Paddle::move(char dir, double xmax) {
        switch(dir) {
            case 'l': // move left
                px -= 1;
                break;
            case 'r': // move right
                px += 1;
                break;
        };
    
        if( px < 1 ) // stop if hit left wall
            px = 1;
        else if( px + pwidth >= xmax ) // stop if hit right wall
            px = xmax - pwidth;
    }

### Makefile

Makefile to compile the program using GNU Make.

    CC=g++
    CFLAGS=-g -Wall
    COMPILE=$(CC) $(CFLAGS)
    
    OBJECTS=pong.o paddle.o ball.o
    
    all: game
    
    ball.o: ball.h ball.cpp
    	$(COMPILE) -c ball.cpp
    
    paddle.o: paddle.h paddle.cpp
    	$(COMPILE) -c paddle.cpp
    
    pong.o: pong.h pong.cpp
    	$(COMPILE) -c pong.cpp
    
    game: ball.o paddle.o pong.o game.cpp
    	$(COMPILE) $(OBJECTS) -o game game.cpp
    
    clean:
    	rm -f $(OBJECTS) game

With this Makefile, just run `make && ./game`.

Explicit commands using `g++`:

    g++ -c ball.cpp
    g++ -c paddle.cpp
    g++ -c pong.cpp
    g++ ball.o paddle.o pong.o -o game game.cpp
    ./game
