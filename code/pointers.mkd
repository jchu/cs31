# Pointers

`pointers` are references to data.

[[TOC]]

## #arr Arrays

Before we discuss pointers, let's explore a more basic datatype: arrays. Arrays are a list of data of a single datatype:

    data_type variable_name[size of array]

Arrays can hold any single datatype from integers to strings and more arrays.

    string names[10]; // can hold 10 strings
    bool bdays[365]; // can hold 365 booleans
    double price[20]; // can hold 20 doubles

Like variables, when an array is declared, it sets aside the requires space for the data in memory. This is done at compile time. Thus, arrays must have a constant defined size. The consequence is that arrays cannot be defined with a variable size.

    int a = 10;
    int fruits[a]; // invalid declaration

However, arrays can be defined with `const int`:

    const int NUM_DAYS_IN_WEEK = 7;
    string days[NUM_DAYS_IN_WEEK];

### #initlist Initialization

Arrays have a special syntax for initilization called `initialization lists`. Arrays can be initialized to a default value, partial list, or a full list of values. An `initialization list` looks like:

    { 1, 2, 3, 4 }
    { "Sunday", "Monday", "Tuesday" }

Arrays can be simultaneously declared and initialized at the same time. However, initialization of an entire array can only be done during declaration. Array assignment (as opposed to an array element assignment) is not valid.

    string days[7] = { "Sunday",
                       "Monday",
                       "Tuesday",
                       "Wednesday",
                       "Thursday",
                       "Friday",
                       "Saturday" }; // initialize all 7 days of the week
    bool bdays[365] = { false }; // initialize all 365 bools to false
    int nums[10] = { 1, 2, 3, 4 }; // set first 4 numbers and initialize rest to 0
    string seasons[] = { "Fall", "Winter", "Spring", "Summer" };
        // declare and initialize a 4 element string array

If the size of the array is explicit, all elements can be initialized by either only setting the first element (all have same value), explicitly setting some elements (rest are defaulted to the type default), or explictely settings all elements. If the size of the array is omitted, the size of the initialization list is the size of the array.

char arrays can be set with strings:

    char message[100] = "This is a message"; // rest of array is initialized to 0
    char hello[] = "Hello"; // 5 character array

### Usage

Array elements are accessed by the `index` starting from 0. Unlike initialization, access can be done using expressions.

    int a[5];
    for(int i = 0; i < 5; i++) {
        a[i] = i+1;
        cout << a[i] << endl;
    }

outputs:

    1
    2
    3
    4
    5

The behaviour is unpredictable for uninitialized elements and indices beyond the bounds of the array. Important: ensure an element is initialized or assigned before it is accessed; ensure the index never goes out of bounds. Compilers may or may not catch these errors because they are perfectly valid statements.


### #dim Multidimensions

Arrays can go beyond a single dimension, simply be specifying the size of those dimensions.

    int square[4][4]; // 4 x 4 array
    int cube[3][3][4]; // 3 x 3 x 4 array

And they can be initialized like normal arrays:

    int square[4][4] = {0}; // all elements are 0
    int month[12][1] = {
        { 31 },
        { 28 },
        { 31 },
        { 30 },
        { 31 },
        { 30 },
        { 31 },
        { 31 },
        { 30 },
        { 31 },
        { 30 },
        { 31 }
        }; // each first dimension has an array as a value

### #arrparam Function Parameters

Arrays are different from regular variables when passed as arguments to functions. They can only be used in `pass-by-reference`. There is no way to automatically pass an entire array copy to a function. One way around this is to manually copy the array to a new array variable and pass that new array as a function argument.

Furthermore, there is no way to automatically determine the size of an array as a paremeter. The size must be another argument to the function. There is a caveat for multidimensional arrays. While the first dimension's size cannot be predetermined, all the other dimensions must be specified.

single dimensional array:

    void initialize_array(int[], int);

    void initialize_array(int array[], int size) {
        for(int i = 0; i < size; i++) {
            array[i] = 0;
        }
    }

multi-dimensional array:

    void initialize_array(int[][100], int);

    void initialize_array(int array[][100], int size) {
        for(int row = 0; row < size; row++) {
            for(int col = 0; col < size; col++) {
                array[row][col] = 0;
            }
        }
    }

Note: Arrays can only be returned as their actual manifestation as pointers (discussed later).

## #pointer Pointers

### #decl Declaration

`pointers` are references to other data. In C++, a `pointer` is declared using the `*` character and the data type of the data it points to: `data_type *variable_name`

    double *a; # a is a pointer to a double
    int *b, *c; # b and c are pointers to integers
    double d, *e, f; # d and f are doubles; e is a pointer to a double

Note: the `*` is associated with the variable name and not the data type.

When a pointer is declared, it does not point to any data yet. A pointer can point to any data that is already named by another variable using the `reference operator &` or it can point to unnamed data that is dynamically created using the `new` operator.

    int a;
    int *b = &a; # b is an int pointer pointing to a

    int *c = new int; # c is an int pointer pointing to an unnamed int

Note: While a pointer may point to some data, the data itself may not yet be initialized. (just like arrays)

Additionally, instead of pointing to a single datum, pointers can point to an array of data using the `new` operator.

    int *a = new int[10]; # a points to an array of 10 ints

    int b = 10;
    int *c = new int[b]; # c points to an array of 10 ints

Note: Because `new` dynamically allocates data, variables can be used to denote the syze of the arrays (unlike regular arrays). Once created, the size of the array is static.

### #basic Basic Usage

`pointers` point to data and are not the data itself. In order to use the data the pointer points to, the `dereference operator *` is used.

    int a = 10;
    int *b = &a;

    *b = 12; # a now has the value 12

The `dereference operator *` follows the reference of the pointer to the actual data.

Dynamically allocated arrays can be treated as regular arrays:

    int a = new int[10];
    a[0] = 1;
    a[1] = 2;

Or can be accessed like regular pointers using `pointer arithmetic`:

    int a = new int[10];
    *(a + 0) = 1;
    *(a + 1) = 2;

When an integer is added or substracted to a pointer, it will go to the corresponding location in the array. Note: like static arrays, array values should be initialized before they are used. Read more about `pointer arithmetic` in the Pointer Details section.

### #free Freeing Pointers

Unlike normal variables, dynamically allocated variables via `new` must be destroyed after use to prevent using up memory. Destroying dynamically allocated data is termed `freeing memory`. This is done via `delete`.

    int *a = new int;
    delete a;   # deletes the integer space and leaves a undefined

    double *b = new double[10];
    delete[] b;  # deletes the integer array space and leave s b undefined

Note: after deleting the dynamically allocated space, the pointer itself now is undefined and cannot be dereferenced again. Also, the pointer cannot be deleted multiple times.

Freeing memory is especially important when using multi-dimensional pointers (each dimension needs to be freed starting from the deepest one) and pointers within structures and classes (when the struct or objects are no longer needed)

### #param Function Parameters

`call-by-reference` parameters take in pointers as arguments and automatically dereference the argument before binding the argument to the parameter variable.

    bool equals(int& a, int& b) {
        return a == b; # a, b bound to actual values
    }

    int a = 0;
    int b = 1;
    if( equals(&a, &b) )
        cout << "a equals b";

On the other hand, pointers can be passed directly as `call-by-value`.

    bool equals(int *a, int *b) {
        return *a == *b; # a, b are pointers and need to be dereferenced
    }

    int a = 0;
    int b = 1;
    if( equals(&a, &b) )
        cout << "a equals b";

## #details Pointer Details

`pointers` are actually implemented as memory addresses. On a 32-bit machine, a `pointer` would be a 32-bit number (addressing `2^{32} - 1` addresses), and on a 64-bit machine, a `pointer` would be a 64-bit number (addressing `2^{64} - 1` addresses. Thus, when a `pointer` is declared, the system allocates 32-bits/64-bits of memory to hold an address. Since an memory address is just a number, `pointers` can story any arbitrary number. The validity of the address is determined by the operating system and can only be checked at runtime.

### Dynamically Allocated Data

There are two memory sections used by programs for variables: the `stack` and the `heap`. The `stack` is used to store any static (size known at compilation) variables. These are constants, function parameters, function variables, global variables. The `heap` is used for dynamic (memory allocated during runtime) variables created via `new`.

### Pointer Arithmetic

`pointer arithmetic` is simply translating memory addresses by relative ammounts. `pointers` are associated with a data type: `bool` are 1-byte, `char` are 1-byte, `int` are 4-bytes, etc. When integers are added or subtracted from a `pointer`, they are translated into increments of the data type.

Any arbitrary amount can be added or subtracted from `pointers`. Thus, either the compiler or the operating system are responsible for ensuring programs do not address data that is not under the control of the program (just like arrays).

### #viz Visualization

Memory can be represented as a contiguous block of bytes in memory. Each byte of memory is addressable by a number. The size of the memory address (whether it is 32-bits or 64-bits) determines how much memory can be addressed in the system. 

    .gv
    rankdir=LR;
    concentrate=true;
    
    subgraph cluster_0 {
        style=filled;
        color=green;

        memory [shape=record, label="{ memory address | data } | {{ high | ~ | ~ } | heap } | {{ ~ | ~ |~  | ~ } | } | { { ~ | ~ | low } | stack }", fixedsized=true, width=3 ]; 
    }

The `heap` holds dynamically allocated data declared with `new`. It starts from high in memory and grows down. The `stack` holds statically allocated data and grows up. Each program has their own section of memory and their own set of `stack` and `heap`. The program runs out of memory when the `heap` and the `stack` collide.

Note: In the following examples, the actual memory addresses are only examples. 

#### Statically Allocated  Data
These declarations are used in the following visualization.

    int a;
    bool flag;
    int *num = &a;
    bool *flagPtr = &flag;

In this visualization, the memory address locations are in the left column, while the data is in the right column. Each row represents a single byte of memory. The boolean `flag` is 1 byte. The integer `a` is 4 bytes. Since a memory location is addressable by an integer, the two pointers `num` and `flagPtr` are also 4 bytes long. They both contain the address location of the variable they point to.

    .gv
    rankdir=LR;
    concentrate=true;
    node [shape=none]

    a
    flag
    flagPtr
    num
    
    subgraph cluster_0 {
        style=filled;
        color=green;

        memory [shape=record, label="{ memory address | data } | {{ high | ~ | 1048587 } | } | {{1048586 | | | <intp> 1048585 } | <intpv> int* } | {{1048582 | | | <boolp> 1048581} | <boolpv> bool*} | { <bool> 1048580 | bool } | { { 1048579 | | | <inta> 1048576 } | <int> int} | {{1048575 | ~ | low } | }", fixedsized=true, width=3 ]; 
    }

    memory:intpv -> memory:inta;
    memory:boolpv -> memory:bool;

    num -> memory:intp [minlen=3];
    flagPtr -> memory:boolp [minlen=3];
    flag -> memory:bool [minlen=3];
    a -> memory:inta [minlen=3];

    .eq num flag a flagPtr

    .ie num .. flagPtr
    .ie flagPtr .. flag
    .ie flag .. a

The variable names (shown on the left) identify the data. Pointers have their own memory space to hold the memory address of the data they point to.

Static arrays simply allocate multiple contiguous regions in memory to hold the data. While the name itself isn't a real pointer, it can act as as a pointer in order to address data in the array.

    int nums[3];

Looks like:

    .gv
    rankdir=LR;
    concentrate=true;
    node [shape=none]

    subgraph cluster_0 {
        style=filled;
        color=green;

        memory [shape=record, label="{ memory address | data } | {{ high | ~ | 1048589 } | } | { { 1048588 | | | <intp2> 1048585 } | int } | { { 1048584 | | | <intp1> 1048581 } | int } |  { { 1048580 | | | <intp0> 1048576 } | int} | {{1048575 | ~ | low } | }", fixedsized=true, width=3 ]; 
    }

    "nums[2] or *nums+2" -> memory:intp2 [minlen=3];
    "nums[1] or *nums+1" -> memory:intp1 [minlen=3];
    "nums[0] or *nums+0" -> memory:intp0 [minlen=3];

    .eq "nums[2] or *nums+2" "nums[1] or *nums+1" "nums[0] or *nums+0"

    .ie "nums[2] or *nums+2" .. "nums[1] or *nums+1"
    .ie "nums[1] or *nums+1" .. "nums[0] or *nums+0"

#### Dynamically Allocated Data

Dynamically allocated data do not have identifiers attached to them (though they can be assigned later). They are only referenced by pointers. The pointer itself is in the `stack` while the allocated memory is in the `heap`

    int a = new int;
    bool *answers = new bool[5];

Looks like:

    .gv
    rankdir=LR;
    concentrate=true;
    node [shape=none]

    subgraph cluster_0 {
        style=filled;
        color=green;

        memory [shape=record, label="{ memory address | data } | {{ high | ~ | 1048585 } | } | { { 1048584 | | | <inta> 1048581 } | int } | { <boolp4> 1048580 | bool } | { <boolp3> 1048579 | bool } | { <boolp2> 1048578 | bool } | { <boolp1> 1048577 | bool } |  { <boolp0> 1048576 | bool} | {{1048575 | ~ | ~ | ~ | 524292 } | } | { { 524291 | | | <boolp> 524288 } | <boolpv> bool* } | { { 524287 | | | <intp> 524284 } | <intpv> int* } | { { 524283 | ~ | low } | }", fixedsized=true, width=3 ]; 
    }

    "answers[4] or *answers+4" -> memory:boolp4 [minlen=3];
    "answers[3] or *answers+3" -> memory:boolp3 [minlen=3];
    "answers[2] or *answers+2" -> memory:boolp2 [minlen=3];
    "answers[1] or *answers+1" -> memory:boolp1 [minlen=3];
    "answers[0] or *answers+0" -> memory:boolp0 [minlen=3];
    a -> memory:intp [minlen=3]


    .eq "answers[4] or *answers+4" "answers[3] or *answers+3" "answers[2] or *answers+2" "answers[1] or *answers+1" "answers[0] or *answers+0" answers a

    .ie "answers[4] or *answers+4" ..  "answers[3] or *answers+3"
    .ie "answers[3] or *answers+3" ..  "answers[2] or *answers+2"
    .ie "answers[2] or *answers+2" ..  "answers[1] or *answers+1"
    .ie "answers[1] or *answers+1" ..  "answers[0] or *answers+0"
    .ie "answers[0] or *answers+0" ..  answers
    .ie answers -> a

    answers -> memory:boolp [minlen=3]
    memory:boolpv -> memory:boolp0
    memory:intpv -> memory:inta
